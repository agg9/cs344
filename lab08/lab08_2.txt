lab08 cs344 Calvin College
Austin Gibson
March 28,2019

8.2
a. They recommend FTRL for L1 optimization, but the code specifies the same rate (learning_rate) for all runs.
    How is FTRL managing the learning rate?
    The FTRL uses a 'learning_rate_power' to manage the learning rate.

b. What good does the bucketing/binning do?
    Bucketing/binning groups a number of values into a smaller number of bins.  For example it can take a range of
    numbers and group them into smaller ranges, or bins/buckets.

c. Submit your solutions to tasks 1â€“2. Did you find their task 1 bucketing to make sense?
    Identify one unique feature cross for task 2 and explain how it could be useful.

    Task 1.)
    def construct_feature_columns():
  """Construct the TensorFlow Feature Columns.

  Returns:
    A set of feature columns
  """
  households = tf.feature_column.numeric_column("households")
  longitude = tf.feature_column.numeric_column("longitude")
  latitude = tf.feature_column.numeric_column("latitude")
  housing_median_age = tf.feature_column.numeric_column("housing_median_age")
  median_income = tf.feature_column.numeric_column("median_income")
  rooms_per_person = tf.feature_column.numeric_column("rooms_per_person")

  # Divide households into 7 buckets.
  bucketized_households = tf.feature_column.bucketized_column(
    households, boundaries=get_quantile_based_boundaries(
      training_examples["households"], 7))

  # Divide longitude into 10 buckets.
  bucketized_longitude = tf.feature_column.bucketized_column(
    longitude, boundaries=get_quantile_based_boundaries(
      training_examples["longitude"], 10))

  #
  # YOUR CODE HERE: bucketize the following columns, following the example above:
  #
  bucketized_latitude = tf.feature_column.bucketized_column(
    latitude, boundaries=get_quantile_based_boundaries(
      training_examples["latitude"], 10))

  bucketized_housing_median_age = tf.feature_column.bucketized_column(
    housing_median_age, boundaries=get_quantile_based_boundaries(
      training_examples["housing_median_age"], 10))

  bucketized_median_income = tf.feature_column.bucketized_column(
    median_income, boundaries=get_quantile_based_boundaries(
      training_examples["median_income"], 10))

  bucketized_rooms_per_person = tf.feature_column.bucketized_column(
    rooms_per_person, boundaries=get_quantile_based_boundaries(
      training_examples["rooms_per_person"], 10))

  feature_columns = set([
    bucketized_longitude,
    bucketized_latitude,
    bucketized_housing_median_age,
    bucketized_households,
    bucketized_median_income,
    bucketized_rooms_per_person])

  return feature_columns

  The bucketing makes sense, although I was a little confused on how to find how many buckets should be
    used.  Their code uses 7 and 10 in different places.  Final RSME: 89.53

  Task 2.)

   #Code Added
   # YOUR CODE HERE: Make a feature column for the long_x_lat feature cross
   long_x_lat = tf.feature_column.crossed_column(
    ([bucketized_longitude, bucketized_latitude]),
      hash_bucket_size=1000
   Final RSME: 81.10

   I think a unique cross would be housing_median_age and median_income.  I think this cross could be used to see a trend
   in the housing market, more specifically what the higher classes are moving towards.  Sometimes the market leans toward
   older looking homes vs more modern, but the housing_median_age and the relation to housing_median_value alone doesn't
   really help show what the higher classes are buying.  Being able to see the median_house_value based on this cross could
   possibly show a trend.

